name: "Terragrunt apply PRODUCTION"

on:
  workflow_dispatch:

env:
  AWS_REGION: ca-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_VERSION: 1.0.10
  TERRAGRUNT_VERSION: 0.35.6
  TF_INPUT: false
  TF_VAR_ecs_secret_token_secret: ${{ secrets.PRODUCTION_TOKEN_SECRET }}
  TF_VAR_google_client_id: ${{ secrets.PRODUCTION_GOOGLE_CLIENT_ID}}
  TF_VAR_google_client_secret: ${{secrets.PRODUCTION_GOOGLE_CLIENT_SECRET}}
  TF_VAR_notify_api_key: ${{ secrets.PRODUCTION_NOTIFY_API_KEY }}
  TF_VAR_rds_db_password: ${{ secrets.PRODUCTION_DB_PASSWORD }}
  TF_VAR_slack_webhook: ${{ secrets.PRODUCTION_SLACK_WEBHOOK }}

jobs:

  # Check the VERSION file to get the target version to deploy and previously deployed version.
  # These are used to determine which Terraform modules need to have `terraform apply` run.
  version-manifest:
    uses: cds-snc/forms-terraform/.github/workflows/version-manifest.yml@main

  terragrunt-apply:
    needs: version-manifest
    runs-on: ubuntu-latest
    env:
      TARGET_VERSION: v${{ needs.version-manifest.outputs.current }}
      PREVIOUS_VERSION: v${{ needs.version-manifest.outputs.previous }} 
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.TARGET_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/*
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - uses: cds-snc/paths-filter@v2.10.3
        id: filter
        with:
          ref: ${{ env.TARGET_VERSION }}
          base: ${{ env.PREVIOUS_VERSION }}
          filters: |
            alarms:
              - 'aws/alarms/**'
              - 'env/production/alarms/**'
            app:
              - 'aws/app/**'
              - 'env/production/app/**'
            common:
              - '.github/workflows/terragrunt-apply-production.yml'
              - 'env/common/**'
              - 'env/terragrunt.hcl'
              - 'env/production/env_vars.hcl'
            dynamodb:
              - 'aws/dynamodb/**'
              - 'env/production/dynamodb/**'
            ecr:
              - 'aws/ecr/**'
              - 'env/production/ecr/**'
            hosted_zone:
              - 'aws/hosted_zone/**'
              - 'env/production/hosted_zone/**'
            kms:
              - 'aws/kms/**'
              - 'env/production/kms/**'
            load_balancer:
              - 'aws/load_balancer/**'
              - 'env/production/load_balancer/**'
            network:
              - 'aws/network/**'
              - 'env/production/network/**'
            rds:
              - 'aws/rds/**'
              - 'env/production/rds/**'
            redis:
              - 'aws/redis/**'
              - 'env/production/redis/**'
            sqs:
              - 'aws/sqs/**'
              - 'env/production/sqs/**'

      # No dependencies
      - name: Terragrunt apply ecr
        if: ${{ steps.filter.outputs.ecr == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/ecr
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply hosted_zone
        if: ${{ steps.filter.outputs.hosted_zone == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/hosted_zone
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply kms
        if: ${{ steps.filter.outputs.kms == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/kms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply sqs
        if: ${{ steps.filter.outputs.sqs == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/sqs
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on kms
      - name: Terragrunt apply network
        if: ${{ steps.filter.outputs.network == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/network
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply dynamodb
        if: ${{ steps.filter.outputs.dynamodb == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/dynamodb
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on network
      - name: Terragrunt apply load_balancer
        if: ${{ steps.filter.outputs.load_balancer == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/load_balancer
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply redis
        if: ${{ steps.filter.outputs.redis == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/redis
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply rds
        if: ${{ steps.filter.outputs.rds == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/rds
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on everything
      - name: Install Lambda deps
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/app/lambda/deps.sh install

      - name: Terragrunt apply app
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/app
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Remove Lambda deps
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/app/lambda/deps.sh delete

      - name: Terragrunt apply alarms
        if: ${{ steps.filter.outputs.alarms == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/production/alarms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve     
