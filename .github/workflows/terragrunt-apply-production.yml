name: "Terragrunt apply PRODUCTION"

on:
  release:
    types: [published]

permissions:
  id-token: write
  contents: read

env:
  APP_ENV: production
  APP_DOMAINS: ${{ vars.PRODUCTION_APP_DOMAINS}}
  AWS_ACCOUNT_ID: ${{ vars.PRODUCTION_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  TERRAFORM_VERSION: 1.6.6
  TERRAGRUNT_VERSION: 0.54.8
  TF_INPUT: false
  TF_VAR_ecs_secret_token: ${{ secrets.PRODUCTION_TOKEN_SECRET }}
  TF_VAR_recaptcha_secret: ${{secrets.PRODUCTION_RECAPTCHA_SITE_SECRET}}
  TF_VAR_recaptcha_public: 6LfuLrQnAAAAAK9Df3gem4XLMRVY2Laq6t2fhZhZ
  TF_VAR_notify_api_key: ${{ secrets.PRODUCTION_NOTIFY_API_KEY }}
  TF_VAR_freshdesk_api_key: ${{ secrets.PRODUCTION_FRESHDESK_API_KEY }}
  TF_VAR_rds_db_password: ${{ secrets.PRODUCTION_DB_PASSWORD }}
  TF_VAR_slack_webhook: ${{ secrets.PRODUCTION_SLACK_WEBHOOK }}
  TV_VAR_opsgenie_api_key: ${{ secrets.PRODUCTION_OPSGENIE_API_KEY }}

  TF_VAR_gc_notify_callback_bearer_token: ${{ secrets.PRODUCTION_GC_NOTIFY_CALLBACK_BEARER_TOKEN }}
  TF_VAR_gc_temp_token_template_id: 61cec9c4-64ca-4e4d-b4d2-a0e931c44422
  TF_VAR_gc_template_id: 92096ac6-1cc5-40ae-9052-fffdb8439a90
  TF_VAR_cognito_code_template_id: 8dde39b6-05b9-43ce-807f-c2364ed3bdb6
  TF_VAR_email_address_contact_us: ${{ vars.PRODUCTION_CONTACT_US_EMAIL }}
  TF_VAR_email_address_support: ${{ vars.PRODUCTION_SUPPORT_EMAIL }}

jobs:
  terragrunt-apply:
    runs-on: ubuntu-latest
    env:
      TARGET_VERSION: ${{ needs.version-manifest.outputs.current }}
      PREVIOUS_VERSION: ${{ needs.version-manifest.outputs.previous }}
    steps:
      - name: Checkout
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0

      # https://github.com/jlumbroso/free-disk-space/tree/54081f138730dfa15788a46383842cd2f914a1be#example
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      # Setup Terraform, Terragrunt, and Conftest
      - name: Setup terraform tools
        uses: cds-snc/terraform-tools-setup@v1

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply-release
          role-session-name: TFApply
          aws-region: ${{ env.AWS_REGION }}

      # No dependencies
      - name: Terragrunt apply ecr
        working-directory: env/cloud/ecr
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply hosted_zone
        working-directory: env/cloud/hosted_zone
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply kms
        working-directory: env/cloud/kms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply oidc_roles
        working-directory: env/cloud/oidc_roles
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply sqs
        working-directory: env/cloud/sqs
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply secrets
        working-directory: env/cloud/secrets
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply s3
        working-directory: env/cloud/s3
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on kms
      - name: Terragrunt apply sns
        working-directory: env/cloud/sns
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Install Cognito Lambda deps
        run: ./aws/cognito/lambda/deps.sh install

      - name: Terragrunt apply cognito
        working-directory: env/cloud/cognito
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Remove Cognito Lambda deps
        run: ./aws/cognito/lambda/deps.sh delete

      - name: Terragrunt apply network
        working-directory: env/cloud/network
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply dynamodb
        working-directory: env/cloud/dynamodb
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on network
      - name: Terragrunt apply load_balancer
        working-directory: env/cloud/load_balancer
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply redis
        working-directory: env/cloud/redis
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply rds
        working-directory: env/cloud/rds
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on everything
      - name: Terragrunt apply app
        working-directory: env/cloud/app
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Install Lambda deps
        run: ./aws/lambdas/code/deps.sh install

      - name: Terragrunt apply lambdas
        working-directory: env/cloud/lambdas
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Remove Lambda deps
        run: ./aws/lambdas/code/deps.sh delete

      - name: Terragrunt apply alarms
        working-directory: env/cloud/alarms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Notify Slack on failure
        if: failure()
        env:
          WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          WORKFLOW_NAME: "${{ github.workflow }}"
        run: |
          json='{"channel":"#forms-production-events", "blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: GitHub workflow failed: <${{ env.WORKFLOW_URL }}|${{ env.WORKFLOW_NAME }}>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" "https://hooks.slack.com${{ secrets.PRODUCTION_SLACK_WEBHOOK }}"
