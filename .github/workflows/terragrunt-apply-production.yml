name: "Terragrunt apply PRODUCTION"

on:
  push:
    branches:
      - main
    paths:
      - "version.txt"

permissions:
  id-token: write
  contents: read

env:
  APP_ENV: production
  APP_DOMAINS: ${{ vars.PRODUCTION_APP_DOMAINS }}
  API_DOMAIN: ${{ vars.PRODUCTION_API_DOMAIN }}
  IDP_DOMAIN: ${{ vars.PRODUCTION_IDP_DOMAIN }}
  AWS_ACCOUNT_ID: ${{ vars.PRODUCTION_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  TERRAFORM_VERSION: 1.12.2
  TERRAGRUNT_VERSION: 0.81.10
  TF_INPUT: false
  # API
  TF_VAR_zitadel_application_key: ${{ secrets.PRODUCTION_ZITADEL_APPLICATION_KEY }}
  # App
  TF_VAR_ecs_secret_token: ${{ secrets.PRODUCTION_TOKEN_SECRET }}
  TF_VAR_recaptcha_secret: ${{ secrets.PRODUCTION_RECAPTCHA_SITE_SECRET }}
  TF_VAR_recaptcha_public: 6LfuLrQnAAAAAK9Df3gem4XLMRVY2Laq6t2fhZhZ
  TF_VAR_notify_callback_bearer_token: ${{ secrets.PRODUCTION_GC_NOTIFY_CALLBACK_BEARER_TOKEN }}
  TF_VAR_notify_api_key: ${{ secrets.PRODUCTION_NOTIFY_API_KEY }}
  TF_VAR_freshdesk_api_key: ${{ secrets.PRODUCTION_FRESHDESK_API_KEY }}
  TF_VAR_rds_connector_db_password: ${{ secrets.PRODUCTION_DB_PASSWORD_RDS_CONNECTOR }}
  TF_VAR_rds_db_password: ${{ secrets.PRODUCTION_DB_PASSWORD }}
  TF_VAR_slack_webhook: ${{ secrets.PRODUCTION_SLACK_WEBHOOK }}
  TF_VAR_opsgenie_api_key: ${{ secrets.PRODUCTION_OPSGENIE_API_KEY }}
  TF_VAR_gc_temp_token_template_id: 61cec9c4-64ca-4e4d-b4d2-a0e931c44422
  TF_VAR_gc_template_id: 92096ac6-1cc5-40ae-9052-fffdb8439a90
  TF_VAR_cognito_code_template_id: 8dde39b6-05b9-43ce-807f-c2364ed3bdb6
  TF_VAR_email_address_contact_us: ${{ vars.PRODUCTION_CONTACT_US_EMAIL }}
  TF_VAR_email_address_support: ${{ vars.PRODUCTION_SUPPORT_EMAIL }}
  TF_VAR_zitadel_administration_key: ${{ secrets.PRODUCTION_ZITADEL_ADMINISTRATION_KEY }}
  TF_VAR_hcaptcha_site_verify_key: ${{ secrets.PRODUCTION_HCAPTCHA_SITE_VERIFY_KEY }}
  # IdP
  TF_VAR_idp_database_cluster_admin_username: ${{ secrets.PRODUCTION_IDP_DATABASE_CLUSTER_ADMIN_USERNAME }}
  TF_VAR_idp_database_cluster_admin_password: ${{ secrets.PRODUCTION_IDP_DATABASE_CLUSTER_ADMIN_PASSWORD }}
  TF_VAR_zitadel_admin_password: ${{ secrets.PRODUCTION_ZITADEL_ADMIN_PASSWORD }}
  TF_VAR_zitadel_admin_username: ${{ secrets.PRODUCTION_ZITADEL_ADMIN_USERNAME }}
  TF_VAR_zitadel_database_name: ${{ secrets.PRODUCTION_ZITADEL_DATABASE_NAME }}
  TF_VAR_zitadel_database_user_password: ${{ secrets.PRODUCTION_ZITADEL_DATABASE_USER_PASSWORD }}
  TF_VAR_zitadel_database_user_username: ${{ secrets.PRODUCTION_ZITADEL_DATABASE_USER_USERNAME }}
  TF_VAR_zitadel_secret_key: ${{ secrets.PRODUCTION_ZITADEL_SECRET_KEY }}
  # API END TO END TEST
  TF_VAR_idp_project_identifier: "284778202772022819"
  TF_VAR_api_end_to_end_test_form_identifier: "cmacogetu00gsx001xt7sodoq"
  TF_VAR_api_end_to_end_test_form_api_private_key: ${{ secrets.PRODUCTION_API_END_TO_END_TEST_FORM_API_PRIVATE_KEY }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get version to deploy
        id: get-version
        uses: ./.github/workflows/get-version
        with:
          is-tagged: "true"

  generate-lambda-functions-matrix:
    needs: get-version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ env.VERSION }}
      - name: Generate matrix
        id: generate-matrix
        run: |
          LAMBDA_ARRAY=$(echo $(cat ./.github/production-lambda-functions.conf) | sed 's/ //g' )
          echo "matrix=$LAMBDA_ARRAY" >> $GITHUB_OUTPUT
    outputs:
      lambda-functions-matrix: ${{ steps.generate-matrix.outputs.matrix }}

  # We deploy ECR first to make sure it is available for the 'build-tag-push-lambda-images' job which will be run in parallel with `terragrunt-apply-all-modules`
  terragrunt-apply-ecr-only:
    needs: get-version
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ env.VERSION }}

      # Setup Terraform, Terragrunt, and Conftest
      - name: Setup terraform tools
        uses: cds-snc/terraform-tools-setup@v1

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
          role-session-name: TFApply
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt apply ecr
        working-directory: env/cloud/ecr
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

  build-tag-push-lambda-images:
    needs: [get-version, generate-lambda-functions-matrix, terragrunt-apply-ecr-only]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.generate-lambda-functions-matrix.outputs.lambda-functions-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ env.VERSION }}

      - name: Build Lambda images
        uses: ./.github/workflows/build-lambda-images
        with:
          lambda-directory: lambda-code/${{ matrix.image }}
          lambda-name: ${{ matrix.image }}

      - name: Tag and push Lambda images
        uses: ./.github/workflows/tag-and-push-docker-images
        with:
          aws-role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
          aws-role-session-name: TFApply
          aws-region: ${{ env.AWS_REGION }}
          image-name: ${{ matrix.image }}
          image-tag: ${{ env.VERSION }}

  # build-tag-push-idp-image:
  #   needs: [get-version, terragrunt-apply-ecr-only]
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{ needs.get-version.outputs.version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #       with:
  #         ref: ${{ env.VERSION }}

  #     - name: Build IdP image
  #       working-directory: idp
  #       run: |
  #         make build

  #     - name: Tag and push IdP image
  #       uses: ./.github/workflows/tag-and-push-docker-images
  #       with:
  #         aws-role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
  #         aws-role-session-name: TFApply
  #         aws-region: ${{ env.AWS_REGION }}
  #         image-name: idp/zitadel
  #         image-tag: ${{ env.VERSION }}
  #         repository-suffix: ""

  terragrunt-apply-all-modules:
    # needs: [get-version, build-tag-push-lambda-images, build-tag-push-idp-image]
    needs: [get-version, build-tag-push-lambda-images]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ env.VERSION }}

      # Setup Terraform, Terragrunt, and Conftest
      - name: Setup terraform tools
        uses: cds-snc/terraform-tools-setup@v1

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
          role-session-name: TFApply
          aws-region: ${{ env.AWS_REGION }}

      # No dependencies
      - name: Terragrunt apply hosted_zone
        working-directory: env/cloud/hosted_zone
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply kms
        working-directory: env/cloud/kms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply oidc_roles
        working-directory: env/cloud/oidc_roles
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply sqs
        working-directory: env/cloud/sqs
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply secrets
        working-directory: env/cloud/secrets
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply s3
        working-directory: env/cloud/s3
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on S3
      - name: Terragrunt apply file_scanning
        working-directory: env/cloud/file_scanning
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply guard_duty
        working-directory: env/cloud/guard_duty
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on kms
      - name: Terragrunt apply sns
        working-directory: env/cloud/sns
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply cognito
        working-directory: env/cloud/cognito
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply network
        working-directory: env/cloud/network
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply dynamodb
        working-directory: env/cloud/dynamodb
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on network
      - name: Terragrunt apply load_balancer
        working-directory: env/cloud/load_balancer
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply redis
        working-directory: env/cloud/redis
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply rds
        working-directory: env/cloud/rds
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply idp
        working-directory: env/cloud/idp
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on everything
      - name: Terragrunt apply app
        working-directory: env/cloud/app
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply api
        working-directory: env/cloud/api
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply lambdas
        working-directory: env/cloud/lambdas
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply alarms
        working-directory: env/cloud/alarms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply glue
        working-directory: env/cloud/glue
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

  update-lambda-function-image:
    needs: [get-version, generate-lambda-functions-matrix, terragrunt-apply-all-modules]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.generate-lambda-functions-matrix.outputs.lambda-functions-matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ env.VERSION }}

      - name: Request Lambda functions to use new image
        uses: ./.github/workflows/request-lambda-functions-to-use-new-image
        with:
          aws-role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
          aws-role-session-name: TFApply
          aws-region: ${{ env.AWS_REGION }}
          lambda-name: ${{ matrix.image }}
          image-tag: ${{ env.VERSION }}

  # update-idp-ecs-service-image:
  #   needs: [get-version, terragrunt-apply-all-modules]
  #   if: ${{ !failure() && !cancelled() }}
  #   runs-on: ubuntu-latest
  #   env:
  #     VERSION: ${{ needs.get-version.outputs.version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #       with:
  #         ref: ${{ env.VERSION }}

  #     - name: Update IdP ESC service to use new image
  #       uses: ./.github/workflows/request-ecs-service-to-use-new-image
  #       with:
  #         aws-role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/forms-terraform-apply
  #         aws-role-session-name: TFApply
  #         aws-region: ${{ env.AWS_REGION }}
  #         ecs-cluster-name: idp
  #         ecs-service-name: zitadel
  #         ecs-task-def-name: zitadel
  #         image-tag: "idp/zitadel:${{ env.VERSION }}"

  notify-on-error:
    needs: [
        get-version,
        terragrunt-apply-ecr-only,
        build-tag-push-lambda-images,
        # build-tag-push-idp-image,
        terragrunt-apply-all-modules,
        update-lambda-function-image,
        # update-idp-ecs-service-image,
      ]
    if: ${{ failure() && !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Send error message on Slack
        env:
          WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          WORKFLOW_NAME: "${{ github.workflow }}"
        run: |
          json='{"channel":"#forms-production-events", "blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: GitHub workflow failed: <${{ env.WORKFLOW_URL }}|${{ env.WORKFLOW_NAME }}>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" "https://hooks.slack.com${{ secrets.PRODUCTION_SLACK_WEBHOOK }}"
        shell: bash
