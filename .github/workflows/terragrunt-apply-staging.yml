name: "Terragrunt apply STAGING"

on:
  workflow_dispatch:
  push:
    branches: [develop]
    paths:
      - "aws/**"
      - "env/common/**"
      - "env/cloud/**"
      - ".github/workflows/terragrunt-apply-staging.yml"

env:
  APP_ENV: "staging"
  APP_DOMAIN: ${{ vars.STAGING_APP_DOMAIN }}
  AWS_ACCOUNT_ID: ${{ vars.STAGING_AWS_ACCOUNT_ID }}
  AWS_REGION: ca-central-1
  AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
  TERRAFORM_VERSION: 1.5.7
  TERRAGRUNT_VERSION: 0.50.15
  TF_INPUT: false
  TF_VAR_ecs_secret_token_secret: ${{ secrets.STAGING_TOKEN_SECRET }}
  TF_VAR_google_client_id: ${{ secrets.STAGING_GOOGLE_CLIENT_ID}}
  TF_VAR_google_client_secret: ${{secrets.STAGING_GOOGLE_CLIENT_SECRET}}
  TF_VAR_recaptcha_secret: ${{secrets.STAGING_RECAPTCHA_SITE_SECRET}}
  TF_VAR_recaptcha_public: 6LfJDN4eAAAAAGvdRF7ZnQ7ciqdo1RQnQDFmh0VY
  TF_VAR_notify_api_key: ${{ secrets.STAGING_NOTIFY_API_KEY }}
  TF_VAR_freshdesk_api_key: ${{ secrets.STAGING_FRESHDESK_API_KEY }}
  TF_VAR_cognito_notify_api_key: ${{ secrets.STAGING_NOTIFY_API_KEY }}
  TF_VAR_rds_db_password: ${{ secrets.STAGING_DB_PASSWORD }}
  TF_VAR_slack_webhook: ${{ secrets.STAGING_SLACK_WEBHOOK }}
  TF_VAR_gc_notify_callback_bearer_token: ${{ secrets.STAGING_GC_NOTIFY_CALLBACK_BEARER_TOKEN }}
  TF_VAR_gc_temp_token_template_id: b6885d06-d10a-422a-973f-05e274d9aa86
  TF_VAR_gc_template_id: 8d597a1b-a1d6-4e3c-8421-042a2b4158b7
  TF_VAR_cognito_code_template_id: 12a18f84-062c-4a67-8310-bf114af051ea
  TF_VAR_email_address_contact_us: ${{ vars.STAGING_CONTACT_US_EMAIL }}
  TF_VAR_email_address_support: ${{ vars.STAGING_SUPPORT_EMAIL }}

jobs:
  terragrunt-apply:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@ed3a0531877aca392eb870f440d9ae7aba83a6bd # v1.4.0
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup Terragrunt
        run: |
          mkdir bin
          wget -O bin/terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION/terragrunt_linux_amd64
          chmod +x bin/*
          echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

      - uses: cds-snc/paths-filter@b316143212d841aed668b7b29240c719d603a9b9 # tag=v2.10.4
        id: filter
        with:
          filters: |
            alarms:
              - 'aws/alarms/**'
              - 'env/cloud/alarms/**'
            app:
              - 'aws/app/**'
              - 'env/cloud/app/**'
            cognito:
              - 'aws/cognito/**'
              - 'aws/cloud/cognito/**'
            common:
              - '.github/workflows/terragrunt-apply-staging.yml'
              - 'env/common/**'
              - 'env/terragrunt.hcl'
            dynamodb:
              - 'aws/dynamodb/**'
              - 'env/cloud/dynamodb/**'
            ecr:
              - 'aws/ecr/**'
              - 'env/cloud/ecr/**'
            hosted_zone:
              - 'aws/hosted_zone/**'
              - 'env/cloud/hosted_zone/**'
            kms:
              - 'aws/kms/**'
              - 'env/cloud/kms/**'
            load_balancer:
              - 'aws/load_balancer/**'
              - 'env/cloud/load_balancer/**'
            load_testing:
              - 'aws/load_testing/**'
              - 'env/cloud/load_testing/**'
            network:
              - 'aws/network/**'
              - 'env/cloud/network/**'
            rds:
              - 'aws/rds/**'
              - 'env/cloud/rds/**'
            redis:
              - 'aws/redis/**'
              - 'env/cloud/redis/**'
            sns:
              - 'aws/sns/**'
              - 'env/cloud/sns/**'
            sqs:
              - 'aws/sqs/**'
              - 'env/cloud/sqs/**'

      # No dependencies
      - name: Terragrunt apply ecr
        if: ${{ steps.filter.outputs.ecr == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/ecr
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply hosted_zone
        if: ${{ steps.filter.outputs.hosted_zone == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/hosted_zone
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply kms
        if: ${{ steps.filter.outputs.kms == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/kms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply sqs
        if: ${{ steps.filter.outputs.sqs == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/sqs
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply sns
        if: ${{ steps.filter.outputs.sns == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/sns
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Install Cognito Lambda deps
        if: ${{ steps.filter.outputs.cognito == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/cognito/lambda/deps.sh install

      - name: Terragrunt apply cognito
        if: ${{ steps.filter.outputs.cognito == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/cognito
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Remove Cognito Lambda deps
        if: ${{ steps.filter.outputs.cognito == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/cognito/lambda/deps.sh delete

      # Depends on kms
      - name: Terragrunt apply network
        if: ${{ steps.filter.outputs.network == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/network
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply dynamodb
        if: ${{ steps.filter.outputs.dynamodb == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/dynamodb
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on network
      - name: Terragrunt apply load_balancer
        if: ${{ steps.filter.outputs.load_balancer == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/load_balancer
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply redis
        if: ${{ steps.filter.outputs.redis == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/redis
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply rds
        if: ${{ steps.filter.outputs.rds == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/rds
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      # Depends on everything
      - name: Install Lambda deps
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/app/lambda/deps.sh install

      - name: Terragrunt apply app
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/app
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Remove Lambda deps
        if: ${{ steps.filter.outputs.app == 'true' || steps.filter.outputs.common == 'true' }}
        run: ./aws/app/lambda/deps.sh delete

      - name: Terragrunt apply alarms
        if: ${{ steps.filter.outputs.alarms == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/alarms
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

        # Load Testing - Depends on ECR
      - name: Build Load Testing Lambda Container
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: aws/load_testing/lambda
        run: docker build -t load_testing_lambda:latest .

      - name: Configure Staging AWS credentials
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        id: aws-form-viewer
        uses: aws-actions/configure-aws-credentials@3d11655d76b27285031fd4e26dd365a469bad2fe
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Staging Amazon ECR
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        id: login-ecr-staging
        uses: aws-actions/amazon-ecr-login@99fe8befaecdc063ad51266ca32e2983e58efd9e

      - name: Tag Images for Staging
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-staging.outputs.registry }}
          ECR_REPOSITORY: load_test
        run: |
          docker tag load_testing_lambda $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push containers to Staging Amazon ECR
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-staging.outputs.registry }}
          ECR_REPOSITORY: load_test
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Logout of Staging Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr-staging.outputs.registry }}

      - name: Remove local version of image
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        run: docker image rm load_testing_lambda

      - name: Terragrunt apply load_testing
        if: ${{ steps.filter.outputs.load_testing == 'true' || steps.filter.outputs.common == 'true' }}
        working-directory: env/cloud/load_testing
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Terragrunt apply pr_review
        working-directory: env/cloud/pr_review
        run: terragrunt apply --terragrunt-non-interactive -auto-approve

      - name: Notify Slack on failure
        if: failure()
        env:
          WORKFLOW_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          WORKFLOW_NAME: "${{ github.workflow }}"
        run: |
          json='{"blocks":[{"type":"section","text":{"type":"mrkdwn","text":":red: GitHub workflow failed: <${{ env.WORKFLOW_URL }}|${{ env.WORKFLOW_NAME }}>"}}]}'
          curl -X POST -H 'Content-type: application/json' --data "$json" ${{ secrets.STAGING_SLACK_WEBHOOK }}
